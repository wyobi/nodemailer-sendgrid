{"mappings":"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","sources":["src/index.ts","package.json","src/helpers.ts","src/base.ts"],"sourcesContent":["import { name, version } from \"../package.json\";\nimport { MailService } from \"@sendgrid/mail\";\n\nimport {\n  readableStreamToString,\n  isDefined,\n  mapStringOrAddress,\n} from \"./helpers\";\nimport type {\n  SendCallback,\n  Mail,\n  AttachmentData,\n  MailDataRequired,\n  MailMessage,\n} from \"./types\";\nimport { SendGridTransportBase } from \"./base\";\n\ntype SendGridTransportOptions = {\n  apiKey?: string;\n};\n\nclass SendGridTransport extends SendGridTransportBase {\n  options: SendGridTransportOptions;\n  name: string;\n  version: string;\n  private sgMail = new MailService();\n  constructor(options: SendGridTransportOptions) {\n    super();\n    this.options = options ?? {};\n    this.name = name;\n    this.version = version;\n    if (options.apiKey) {\n      this.sgMail.setApiKey(options.apiKey);\n    }\n  }\n\n  async send(mail: MailMessage, callback: SendCallback<any>) {\n    try {\n      const msg = await new Promise((resolve, reject) => {\n        mail.normalize((err, _source) => {\n          if (err) {\n            return reject(err);\n          }\n          \n          const msg: Partial<MailDataRequired> = {};\n          const source = _source ?? {};\n          Object.keys(source ?? {}).forEach((key) => {\n            switch (key) {\n              case \"subject\":\n              case \"text\":\n              case \"html\":\n                msg[key] = source[key] as any;\n                break;\n              case \"from\":\n              case \"replyTo\":\n                msg[key] = [source[key] ?? []]\n                  .flat()\n                  .map(mapStringOrAddress)\n                  .shift();\n                break;\n              case \"to\":\n              case \"cc\":\n              case \"bcc\":\n                msg[key] = [source[key] ?? []].flat().map(mapStringOrAddress);\n                break;\n              case \"attachments\":\n                this.handleAttachments(source, msg);\n                break;\n              case \"alternatives\":\n                this.handleAlternatives(source, msg);\n                break;\n              case \"icalEvent\":\n                {\n                  let attachment: AttachmentData = {\n                    content: readableStreamToString(\n                      (source.icalEvent as Mail.IcalAttachment).content ?? \"\"\n                    ),\n                    filename:\n                      (source.icalEvent as Mail.IcalAttachment).filename ||\n                      \"invite.ics\",\n                    type: \"application/ics\",\n                    disposition: \"attachment\",\n                  };\n                  msg.attachments = (msg.attachments ?? []).concat(attachment);\n                }\n                break;\n              case \"watchHtml\":\n                {\n                  let alternative = {\n                    content: source.watchHtml,\n                    type: \"text/watch-html\",\n                  };\n                  msg.content = (msg.content ?? []).concat(alternative as any);\n                }\n                break;\n              case \"normalizedHeaders\":\n                /*\n                            const headers = msg.headers || {};\n                            Object.keys(source.normalizedHeaders || {}).forEach(header => {\n                                headers[header] = source.normalizedHeaders[header];\n                            });\n    \n                            msg.headers = headers*/\n                break;\n              case \"messageId\":\n                msg.headers = msg.headers ?? {};\n                msg.headers[\"message-id\"] = source.messageId!;\n                break;\n              default:\n                (msg as any)[key] = (source as any)[key];\n            }\n          });\n    \n          if (msg?.content?.length) {\n            if (msg.text) {\n              msg.content.unshift({ type: \"text/plain\", value: msg.text });\n              delete msg.text;\n            }\n            if (msg.html) {\n              msg.content.unshift({ type: \"text/html\", value: msg.html });\n              delete msg.html;\n            }\n          }\n\n          resolve(msg);\n        });\n      })\n\n      return await this.sgMail.send(msg as MailDataRequired, callback as any);\n    }\n    catch(err) {\n      if(callback) {\n        callback(err as Error | null, null);\n      }\n      else {\n        throw err;\n      }\n    }\n  }\n  \n  private handleAlternatives(\n    source: Mail.Options,\n    msg: Partial<MailDataRequired>\n  ) {\n    if (!source.alternatives) return;\n    const alternatives = source.alternatives.map((entry) => {\n      const alternative = {\n        value: readableStreamToString(entry.content ?? \"\"),\n        type: entry.contentType!,\n      };\n      return alternative;\n    });\n\n    msg.content = (msg.content ?? []).concat(alternatives);\n  }\n\n  private handleAttachments(\n    source: Mail.Options,\n    msg: Partial<MailDataRequired>\n  ) {\n    const attachments = (source.attachments ?? [])\n      .map((entry) => {\n        if (!entry.content || !entry.filename) return;\n        const attachment: AttachmentData = {\n          content: readableStreamToString(entry.content),\n          filename: entry.filename,\n          type: entry.contentType,\n          disposition: \"attachment\",\n        };\n        if (entry.cid) {\n          attachment.contentId = entry.cid;\n          attachment.disposition = \"inline\";\n          (attachment as any).toJSON = function() {\n            var d = {} as any;\n            for(const k in this) {\n              if(k === \"toJSON\") {\n                continue;\n              }\n              else if(k === \"contentId\") {\n                d[\"content_id\"] = this[k];\n              }\n              else {\n                d[k] = this[k];\n              }\n            }\n            return d;\n          };\n        }\n        return attachment;\n      })\n      .filter(isDefined);\n\n    msg.attachments = (msg.attachments ?? []).concat(attachments);\n  }\n}\n\nexport const createSendGridTransport = (options: SendGridTransportOptions) =>\n  new SendGridTransport(options);\n\nexport default createSendGridTransport;\n","{\n  \"name\": \"nodemailer-sendgrid-create-transport\",\n  \"version\": \"2.0.1\",\n  \"description\": \"\",\n  \"source\": \"src/index.ts\",\n  \"main\": \"dist/main.js\",\n  \"types\": \"dist/main.d.ts\",\n  \"module\": \"dist/module.js\",\n  \"scripts\": {\n    \"watch\": \"parcel watch\",\n    \"build\": \"parcel build\",\n    \"example\": \"ts-node examples/mail.ts\"\n  },\n  \"keywords\": [\n    \"nodemailer\",\n    \"sendgrid\"\n  ],\n  \"author\": \"Andris Reinman\",\n  \"license\": \"MIT\",\n  \"dependencies\": {\n    \"@sendgrid/helpers\": \"^8.0.0\",\n    \"@sendgrid/mail\": \"^8.1.4\"\n  },\n  \"devDependencies\": {\n    \"@parcel/packager-ts\": \"2.13.3\",\n    \"@parcel/transformer-typescript-types\": \"^2.13.3\",\n    \"@types/nodemailer\": \"^6.4.16\",\n    \"eslint-config-nodemailer\": \"^1.2.0\",\n    \"nodemailer\": \"^6.9.15\",\n    \"parcel\": \"^2.13.3\",\n    \"ts-node\": \"^10.9.2\",\n    \"typescript\": \">=5.6.3\"\n  },\n  \"engines\": {\n    \"node\": \">= 12\"\n  }\n}\n","import type Mail from \"nodemailer/lib/mailer\";\nimport type { Readable } from \"stream\";\n\nexport const readableStreamToString = (\n  value: string | Readable | Buffer\n): string => {\n  return Buffer.isBuffer(value) ? value.toString() : (value as string);\n};\nexport const isDefined = <T>(value: T | undefined): value is T => {\n  return typeof value !== \"undefined\";\n};\n\nexport const mapStringOrAddress = (entry: string | Mail.Address) => {\n  if (typeof entry == \"string\") return entry;\n\n  return {\n    name: entry.name,\n    email: entry.address,\n  };\n};\n","import type { Transport } from \"nodemailer\";\nimport { SendCallback, MailMessage } from \"./types\";\n\nexport abstract class SendGridTransportBase<T = any> implements Transport<T> {\n  abstract name: string;\n  abstract version: string;\n\n  abstract send(mail: MailMessage<T>, callback: SendCallback<T>): void;\n\n  verify?(callback: (err: Error | null, success: true) => void): void;\n  verify?(): Promise<true>;\n\n  close?(): void;\n}\n"],"names":[],"version":3,"file":"main.js.map","sourceRoot":"../"}